function shootev_search2d()
    format long;
    
    % 创建plots目录
    if ~exist('plots', 'dir')
        mkdir('plots');
    end

        % 定义参数扫描范围
        realomg = linspace(1.8, 3.1, 100);    % 实部扫描范围
        imagomg = linspace(-15.0e-2, -5.0e-10,100); % 虚部扫描范围
        [Re, Im] = meshgrid(realomg, imagomg);    % 生成网格
        
    % 将二维网格展平为一维数组以便并行处理
    omega_list = Re(:) + 1i*Im(:);
    total_points = numel(omega_list);
    residual_flat = zeros(total_points, 1);

    % ODE求解参数
    deri = 0.0001 + 0.00001i;
    options = odeset('AbsTol', 1e-8, 'RelTol', 1e-8);

    % 启动并行池
    if isempty(gcp('nocreate'))
        parpool; % 根据系统核心数自动分配
    end

    % 创建数据队列用于进度跟踪
    progressQueue = parallel.pool.DataQueue;
    afterEach(progressQueue, @updateProgress);
    progressCount = 0;
    totalStart = tic;

    % 资源监测初始化
    monitorTimer = timer('ExecutionMode', 'fixedRate', 'Period', 5, ...
        'TimerFcn', @(x,y) monitorResources());
    start(monitorTimer);
    try
        % 并行计算主循环
        parfor k = 1:total_points
            current_omega = omega_list(k);
            % 将参数显式传递进目标函数
            residual = shooting_objective(current_omega, deri, options);
            residual_flat(k) = norm(residual);
            
            % 进度更新
            send(progressQueue, []);
        end

        % 结果重构为二维矩阵
        residual_values = reshape(residual_flat, size(Re));

        % 终止资源监控
        stop(monitorTimer);
        delete(monitorTimer);
        % ========== 三维可视化 ==========
        fig = figure('Position', [100 100 1200 800]);
        
        % 曲面图
        subplot(2,2,[1 3]);
        surf(Re, Im, residual_values, 'EdgeColor', 'none');
        title('目标函数值曲面图');
        xlabel('Re(\omega)');
        ylabel('Im(\omega)');
        zlabel('||Residual||');
        view(-30, 30);
        colormap jet;
        colorbar;
        
        % 等高线图
        subplot(2,2,2);
        contourf(Re, Im, log10(residual_values), 20);
        title('对数坐标等高线图');
        xlabel('Re(\omega)');
        ylabel('Im(\omega)');
        colorbar;
        
        % 二维投影图
        subplot(2,2,4);
        imagesc(realomg, imagomg, residual_values);
        set(gca,'YDir','normal');
        title('二维投影热图');
        xlabel('Re(\omega)');
        ylabel('Im(\omega)');
        colorbar;
        
        % 保存图像
        saveas(fig, fullfile('plots', 'residual_landscape.png'));
        close(fig);
    catch ME
        % 异常处理
        stop(monitorTimer);
        delete(monitorTimer);
        rethrow(ME);
    end
    % 资源监控函数
    function monitorResources()
        try
            % Windows系统
            [~, cmdout] = system('wmic OS get FreePhysicalMemory,TotalVisibleMemorySize /value');
            mem_info = regexp(cmdout, '(\d+)', 'match');
            total_mem = str2double(mem_info{2})/1024; % MB
            free_mem = str2double(mem_info{1})/1024;
            
            [~, cpu_info] = system('wmic cpu get LoadPercentage /value');
            cpu_load = regexp(cpu_info, '(\d+)', 'match');
            
            fprintf('[资源监控] 内存使用: %.1f/%.1f MB | CPU负载: %s%%\n',...
                   total_mem-free_mem, total_mem, cpu_load{1});
        catch
            fprintf('资源监控仅支持Windows系统\n');
        end
    end
    % 进度更新函数
    function updateProgress(~)
        progressCount = progressCount + 1;
        elapsed = toc(totalStart);
        remaining = (elapsed/progressCount)*(total_points - progressCount);
        
        fprintf('进度: %.1f%%, 已用时间: %.1fs, 预计剩余: %.1fs\n',...
               progressCount/total_points*100,...
               elapsed,...
               remaining);
    end

end
    % 嵌套函数保持与原始代码一致
    function residual = shooting_objective(omega, deri, options)
        [~, Er] = ode15s(@(x, Er) evfun(x, Er, omega), [0, 1], [0, deri], options);
        boundary_value = Er(end, 1);
        residual = [real(boundary_value); imag(boundary_value)]; % 保持二维残差
    end

    function yy = evfun(x, Er, omg_val)
        % 保持原有物理模型计算不变
        rho0 = 0.01;
        tau = 1.0;
        M_T = 0.5;
        q = 1.05 + 4*x.^2;
        T = 0.2 + 0.8*(1 - x.^2).^2;
        M_val = M_T/sqrt(T);
        zeta_val1 = q*omg_val/sqrt(T);
        Zdf1 = -2*dawson(zeta_val1) + 1i*sqrt(pi)*exp(-zeta_val1.^2);
        zeta_val2 = q*omg_val/(2.0*sqrt(T));
        Zdf2 = -2*dawson(zeta_val2) + 1i*sqrt(pi)*exp(-zeta_val2.^2);

        D_0_plus = 1.0+zeta_val1*Zdf1;
        D_0_minus = 1.0+zeta_val1*Zdf1;
        D_1_plus = 2.0*M_val - zeta_val1 - Zdf1*(M_val*M_val/(1.0+tau) - ...
            2.0*M_val*zeta_val1+ zeta_val1*zeta_val1 + 1.0/2.0);
        D_1_minus = 2.0*M_val + zeta_val1 + Zdf1*(M_val*M_val/(1.0+tau) + ...
            2.0*M_val*zeta_val1+ zeta_val1*zeta_val1 + 1.0/2.0);
        D_2_plus = 2.0*M_val^2/(1.0+tau) +4.0*M_val^2 - 4.0*M_val*zeta_val1 + Zdf1* ...
            (M_val^4/(zeta_val1*(1.0+tau)^2) - 4.0*M_val^3/(1.0+tau) + ...
            2.0*M_val^2*zeta_val1/ (1.0+tau) + 4.0*M_val^2*zeta_val1 + ...
            M_val^2/(zeta_val1*(1.0+tau)) - 4.0*M_val*zeta_val1^2 - ...
            2.0*M_val + zeta_val1^3 + zeta_val1 + 1.0/(2.0*zeta_val1)) + ...
            zeta_val1^2 + 3.0/2.0;
        D_2_minus = 2.0*M_val^2/(1.0+tau) + 4.0*M_val^2 + 4.0*M_val*zeta_val1 + Zdf1* ...
            (M_val^4/(zeta_val1*(1.0+tau)^2) + 4.0*M_val^3/(1.0+tau) + ...
            2.0*M_val^2*zeta_val1/ (1.0+tau) + 4.0*M_val^2*zeta_val1 + ...
            M_val^2/(zeta_val1*(1.0+tau)) + 4.0*M_val*zeta_val1^2 + ...
            2.0*M_val + zeta_val1^3 + zeta_val1 + 1.0/(2.0*zeta_val1)) + ...
            zeta_val1^2 + 3.0/2.0;
        D_3_plus = 12.0*M_val^3/(1.0+tau) + 8.0*M_val^3 - ...
            3.0*M_val^2*zeta_val1/(1.0+tau) - 12.0*M_val^2*zeta_val1 + ...
            6.0*M_val*zeta_val1^2 + 9.0*M_val + Zdf1* ...
            (-M_val^6/(zeta_val1^2*(tau+1.0)^3) + ...
            6.0*M_val^5/((tau+1.0)^2*zeta_val1) - 3.0*M_val^4/ ...
            (tau+1.0)^2 - 12.0*M_val^4/(tau+1.0) - ...
            3.0*M_val^4/(2.0*zeta_val1^2*(tau+1.0)^2) + ...
            12.0*M_val^3*zeta_val1/(tau+1.0) + 8.0*M_val^3*zeta_val1 + ...
            6.0*M_val^3/(zeta_val1*(tau+1.0)) - 3.0*M_val^2*zeta_val1^2/(tau+1.0) - ...
            12.0*M_val^2*zeta_val1^2 - 3.0*M_val^2/(1.0+tau) - ...
            6.0*M_val^2 - 3.0*M_val^2/(2.0*zeta_val1^2*(tau+1.0)) + ...
            6.0*M_val*zeta_val1^3 + 6.0*M_val* zeta_val1 + 3.0*M_val/zeta_val1 - ...
            zeta_val1^4 - 3.0*zeta_val1^2/2.0 - 3.0/2.0 -3.0/(4.0*zeta_val1^2)) - ...
            zeta_val1^3 - 2.0*zeta_val1;
        D_3_minus = 12.0*M_val^3/(1.0+tau) + 8.0*M_val^3 + ...
            3.0*M_val^2*zeta_val1/(1.0+tau) + 12.0*M_val^2*zeta_val1 + ...
            6.0*M_val*zeta_val1^2 + 9.0*M_val + Zdf1* ...
            (M_val^6/(zeta_val1^2*(tau+1.0)^3) + ...
            6.0*M_val^5/((tau+1.0)^2*zeta_val1) + 3.0*M_val^4/ ...
            (tau+1.0)^2 + 12.0*M_val^4/(tau+1.0) + ...
            3.0*M_val^4/(2.0*zeta_val1^2*(tau+1.0)^2) + ...
            12.0*M_val^3*zeta_val1/(tau+1.0) + 8.0*M_val^3*zeta_val1 + ...
            6.0*M_val^3/(zeta_val1*(tau+1.0)) + 3.0*M_val^2*zeta_val1^2/(tau+1.0) + ...
            12.0*M_val^2*zeta_val1^2 + 3.0*M_val^2/(1.0+tau) + ...
            6.0*M_val^2 + 3.0*M_val^2/(2.0*zeta_val1^2*(tau+1.0)) + ...
            6.0*M_val*zeta_val1^3 + 6.0*M_val* zeta_val1 + 3.0*M_val/zeta_val1 + ...
            zeta_val1^4 + 3.0*zeta_val1^2/2.0 + 3.0/2.0 + 3.0/(4.0*zeta_val1^2)) + ...
            zeta_val1^3 + 2.0*zeta_val1;
        D_4_plus = M_val^4*(6.0/(tau+1.0)^2 + 48.0/(tau+1.0) + 16.0) + ...
            M_val^3*( 6144.0* zeta_val1/(5.0^24*(tau+1.0)^3) - ...
            6144.0*zeta_val1/(5.0^24*(tau+1.0)^2) - 24.0* zeta_val1/(tau+1.0) - ...
            32.0*zeta_val1 ) + M_val^2*( 2048.0*zeta_val1^2/(5.0^24* (tau+1.0)^3) - ...
            2048.0*zeta_val1^2/(5.0^24*(tau+1.0)^2) + 4.0*zeta_val1^2/ (tau+1.0) + ...
            2048.0/(5.0^24*(tau+1.0)^3) - 2048.0/(5.0^24*(tau+1.0)^2) + ...
            8.0/(tau+1.0) + 24.0*zeta_val1^2 + 36.0 ) - M_val*( 8.0*zeta_val1^3 + ...
            16.0*zeta_val1 ) + Zdf1*( M_val^8/((tau+1.0)^4*zeta_val1^3) - ...
            8.0*M_val^7/((tau+1.0)^3*zeta_val1^2) + M_val^6*( 6144.0/(5.0^24*(tau+ ...
            1.0)^4*zeta_val1) + 4.0/((tau+1.0)^3*zeta_val1) + ...
            24.0/((tau+1.0)^2*zeta_val1) + 2.0/((tau+1.0)^3*zeta_val1^3) ) - ...
            M_val^5 * ( 4096.0/(5.0^24*(tau+1.0)^4) + 8192.0/(5.0^24*(tau+1.0)^3) + ...
            24.0/(tau+1.0)^2 + 32.0/(tau+1.0) - 2048.0/(5.0^24*(tau+1.0)^4*zeta_val1^2) + ...
            2048.0/(5.0^24*(tau+1.0)^3*zeta_val1^2) + 12.0/((tau+1.0)^2*zeta_val1^2) ) + ...
            M_val^4*( 6.0*zeta_val1/((tau+1.0)^2) + 48.0*zeta_val1/(tau+1.0) + ...
            4096.0/(5.0^24*(tau+1.0)^4*zeta_val1) - 6144.0/(5.0^24*(tau+ ...
            1.0)^3*zeta_val1) + 6.0/((tau+1.0)^2*zeta_val1) + ...
            24.0/((tau+1.0)*zeta_val1) + 16.0*zeta_val1 + ...
            2048.0/(5.0^25*(tau+1.0)^4*zeta_val1^3) - ...
            2048.0/(5.0^25*(tau+1.0)^3*zeta_val1^3) + ...
            3.0/((tau+1.0)^2*zeta_val1^3) ) + ...
            M_val^3*(  6144.0*zeta_val1^2/(5.0^24*(tau+1.0)^3)  - ...
            6144.0*zeta_val1^2/(5.0^24*(tau+1.0)^2)  - 24.0*zeta_val1^2/(tau+1.0) + ...
            6144.0/(5.0^24*(tau+1.0)^3) - 6144.0/(5.0^24*(tau+1.0)^2) - 24.0/(tau+1.0) - ...
            32.0*zeta_val1^2 - 4096.0/(5.0^24*(tau+1.0)^3*zeta_val1^2) + ...
            4096.0/(5.0^24*(tau+1.0)^2*zeta_val1^2) - 12.0/((tau+1.0)*zeta_val1^2) - ...
            16.0 ) + M_val^2*( 2048.0*zeta_val1^3/(5.0^24*(tau+1.0)^3) - ...
            2048.0*zeta_val1^3/(5.0^24*(tau+1.0)^2) + ...
            4.0*zeta_val1^3/(tau+1.0) - 2048.0*zeta_val1/(5.0^24*(tau+1.0)^3) + ...
            2048.0*zeta_val1/(5.0^24*(tau+1.0)^2) + 6.0*zeta_val1/(tau+1.0) + ...
            24.0*zeta_val1^3 - 2048.0/(5.0^24*(tau+1.0)^3*zeta_val1) + ...
            2048.0/(5.0^24*(tau+1.0)^2*zeta_val1) + 6.0/((tau+1.0)*zeta_val1) + ...
            24.0*zeta_val1 + 3072.0/(5.0^25*(tau+1.0)^3*zeta_val1^3) - ...
            3072.0/(5.0^25*(tau+1.0)^2*zeta_val1^3) + 3.0/((tau+1.0)*zeta_val1^3) + ...
            12.0/(zeta_val1) ) - M_val*( 8.0*zeta_val1^4 + 12.0*zeta_val1^2 + 12.0 + ...
            6.0/(zeta_val1^2) ) + zeta_val1^5 + 2*zeta_val1^3 + 3.0*zeta_val1 + ...
            3.0/(zeta_val1) + 3.0/(2.0*zeta_val1^3)) + zeta_val1^4 + ...
            5.0*zeta_val1^2/2.0 + 19.0/4.0;
        D_4_minus = M_val^4*(6.0/(tau+1.0)^2 + 48.0/(tau+1.0) + 16.0) - M_val^3* ...
            ( 6144.0*zeta_val1/(5.0^24*(tau+1.0)^3) - 6144.0*zeta_val1/(5.0^24*(tau+1.0)^2) - ...
            24.0*zeta_val1/(tau+1.0) - 32.0*zeta_val1 ) + ...
            M_val^2*( 2048.0*zeta_val1^2/(5.0^24*(tau+1.0)^3) - ...
            2048.0*zeta_val1^2/(5.0^24*(tau+1.0)^2) + 4.0*zeta_val1^2/(tau+1.0) + ...
            2048.0/(5.0^24*(tau+1.0)^3) - 2048.0/(5.0^24*(tau+1.0)^2) + 8.0/(tau+1.0) + ...
            24.0*zeta_val1^2 + 36.0 ) + M_val*( 8.0*zeta_val1^3 + 16.0*zeta_val1 ) + ...
            Zdf1*( M_val^8/((tau+1.0)^4*zeta_val1^3) + ...
            8.0*M_val^7/((tau+1.0)^3*zeta_val1^2) + ...
            M_val^6*( 6144.0/(5.0^24*(tau+1.0)^4*zeta_val1) + ...
            4.0/((tau+1.0)^3*zeta_val1) + 24.0/((tau+1.0)^2*zeta_val1) + ...
            2.0/((tau+1.0)^3*zeta_val1^3) ) + M_val^5 * ...
            ( 4096.0/(5.0^24*(tau+1.0)^4) + 8192.0/(5.0^24*(tau+1.0)^3) + ...
            24.0/(tau+1.0)^2 + 32.0/(tau+1.0) - 2048.0/(5.0^24*(tau+1.0)^4*zeta_val1^2) + ...
            2048.0/(5.0^24*(tau+1.0)^3*zeta_val1^2) + 12.0/((tau+1.0)^2*zeta_val1^2) ) + ...
            M_val^4*( 6.0*zeta_val1/((tau+1.0)^2) + 48.0*zeta_val1/(tau+1.0) + ...
            4096.0/(5.0^24*(tau+1.0)^4*zeta_val1) - ...
            6144.0/(5.0^24*(tau+1.0)^3*zeta_val1) + ...
            6.0/((tau+1.0)^2*zeta_val1) + 24.0/((tau+1.0)*zeta_val1) + 16.0*zeta_val1 + ...
            2048.0/(5.0^25*(tau+1.0)^4*zeta_val1^3) - ...
            2048.0/(5.0^25*(tau+1.0)^3*zeta_val1^3) + ...
            3.0/((tau+1.0)^2*zeta_val1^3) ) - ...
            M_val^3*(  6144.0*zeta_val1^2/(5.0^24*(tau+1.0)^3)  - ...
            6144.0*zeta_val1^2/(5.0^24*(tau+1.0)^2)  - 24.0*zeta_val1^2/(tau+1.0) + ...
            6144.0/(5.0^24*(tau+1.0)^3) - 6144.0/(5.0^24*(tau+1.0)^2) - 24.0/(tau+1.0) - ...
            32.0*zeta_val1^2 - 4096.0/(5.0^24*(tau+1.0)^3*zeta_val1^2) + ...
            4096.0/(5.0^24*(tau+1.0)^2*zeta_val1^2) - ...
            12.0/((tau+1.0)*zeta_val1^2) - 16.0 ) + ...
            M_val^2*( 2048.0*zeta_val1^3/(5.0^24*(tau+1.0)^3) - ...
            2048.0*zeta_val1^3/(5.0^24*(tau+1.0)^2) + ...
            4.0*zeta_val1^3/(tau+1.0) - 2048.0*zeta_val1/(5.0^24*(tau+1.0)^3) + ...
            2048.0*zeta_val1/(5.0^24*(tau+1.0)^2) + ...
            6.0*zeta_val1/(tau+1.0) + 24.0*zeta_val1^3 - ...
            2048.0/(5.0^24*(tau+1.0)^3*zeta_val1) + 2048.0/(5.0^24*(tau+1.0)^2*zeta_val1) + ...
            6.0/((tau+1.0)*zeta_val1) + 24.0*zeta_val1 + ...
            3072.0/(5.0^25*(tau+1.0)^3*zeta_val1^3) - ...
            3072.0/(5.0^25*(tau+1.0)^2*zeta_val1^3) + 3.0/((tau+1.0)*zeta_val1^3) + ...
            12.0/(zeta_val1) ) + M_val*( 8.0*zeta_val1^4 + 12.0*zeta_val1^2 + 12.0 + ...
            6.0/(zeta_val1^2) ) + zeta_val1^5 + 2*zeta_val1^3 + 3.0*zeta_val1 + ...
            3.0/(zeta_val1) + 3.0/(2.0*zeta_val1^3)) + zeta_val1^4 + ...
            5.0*zeta_val1^2/2.0 + 19.0/4.0;

        L_0_plus = 1.0+zeta_val2*Zdf2;
        L_0_minus = 1.0+zeta_val2*Zdf2;
        L_1_plus = 2.0*M_val - zeta_val2 - Zdf2*(M_val*M_val/(1.0+tau) - ...
            2.0*M_val*zeta_val2+ zeta_val2*zeta_val2 + 1.0/2.0);
        L_1_minus = 2.0*M_val + zeta_val2 + Zdf2*(M_val*M_val/(1.0+tau) + ...
            2.0*M_val*zeta_val2+ zeta_val2*zeta_val2 + 1.0/2.0);
        L_2_plus = 2.0*M_val^2/(1.0+tau) +4.0*M_val^2 - 4.0*M_val*zeta_val2 + Zdf2* ...
            (M_val^4/(zeta_val2*(1.0+tau)^2) - 4.0*M_val^3/(1.0+tau) + ...
            2.0*M_val^2*zeta_val2/ (1.0+tau) + 4.0*M_val^2*zeta_val2 + ...
            M_val^2/(zeta_val2*(1.0+tau)) - 4.0*M_val*zeta_val2^2 - ...
            2.0*M_val + zeta_val2^3 + zeta_val2 + 1.0/(2.0*zeta_val2)) + ...
            zeta_val2^2 + 3.0/2.0;
        L_2_minus = 2.0*M_val^2/(1.0+tau) + 4.0*M_val^2 + 4.0*M_val*zeta_val2 + Zdf2* ...
            (M_val^4/(zeta_val2*(1.0+tau)^2) + 4.0*M_val^3/(1.0+tau) + ...
            2.0*M_val^2*zeta_val2/ (1.0+tau) + 4.0*M_val^2*zeta_val2 + ...
            M_val^2/(zeta_val2*(1.0+tau)) + 4.0*M_val*zeta_val2^2 + ...
            2.0*M_val + zeta_val2^3 + zeta_val2 + 1.0/(2.0*zeta_val2)) + ...
            zeta_val2^2 + 3.0/2.0;
        L_3_plus = 12.0*M_val^3/(1.0+tau) + 8.0*M_val^3 - ...
            3.0*M_val^2*zeta_val2/(1.0+tau) - 12.0*M_val^2*zeta_val2 + ...
            6.0*M_val*zeta_val2^2 + 9.0*M_val + Zdf2* ...
            (-M_val^6/(zeta_val2^2*(tau+1.0)^3) + ...
            6.0*M_val^5/((tau+1.0)^2*zeta_val2) - 3.0*M_val^4/ ...
            (tau+1.0)^2 - 12.0*M_val^4/(tau+1.0) - ...
            3.0*M_val^4/(2.0*zeta_val2^2*(tau+1.0)^2) + ...
            12.0*M_val^3*zeta_val2/(tau+1.0) + 8.0*M_val^3*zeta_val2 + ...
            6.0*M_val^3/(zeta_val2*(tau+1.0)) - 3.0*M_val^2*zeta_val2^2/(tau+1.0) - ...
            12.0*M_val^2*zeta_val2^2 - 3.0*M_val^2/(1.0+tau) - ...
            6.0*M_val^2 - 3.0*M_val^2/(2.0*zeta_val2^2*(tau+1.0)) + ...
            6.0*M_val*zeta_val2^3 + 6.0*M_val* zeta_val2 + 3.0*M_val/zeta_val2 - ...
            zeta_val2^4 - 3.0*zeta_val2^2/2.0 - 3.0/2.0 -3.0/(4.0*zeta_val2^2)) - ...
            zeta_val2^3 - 2.0*zeta_val2;
        L_3_minus = 12.0*M_val^3/(1.0+tau) + 8.0*M_val^3 + ...
            3.0*M_val^2*zeta_val2/(1.0+tau) + 12.0*M_val^2*zeta_val2 + ...
            6.0*M_val*zeta_val2^2 + 9.0*M_val + Zdf2* ...
            (M_val^6/(zeta_val2^2*(tau+1.0)^3) + ...
            6.0*M_val^5/((tau+1.0)^2*zeta_val2) + 3.0*M_val^4/ ...
            (tau+1.0)^2 + 12.0*M_val^4/(tau+1.0) + ...
            3.0*M_val^4/(2.0*zeta_val2^2*(tau+1.0)^2) + ...
            12.0*M_val^3*zeta_val2/(tau+1.0) + 8.0*M_val^3*zeta_val2 + ...
            6.0*M_val^3/(zeta_val2*(tau+1.0)) + 3.0*M_val^2*zeta_val2^2/(tau+1.0) + ...
            12.0*M_val^2*zeta_val2^2 + 3.0*M_val^2/(1.0+tau) + ...
            6.0*M_val^2 + 3.0*M_val^2/(2.0*zeta_val2^2*(tau+1.0)) + ...
            6.0*M_val*zeta_val2^3 + 6.0*M_val* zeta_val2 + 3.0*M_val/zeta_val2 + ...
            zeta_val2^4 + 3.0*zeta_val2^2/2.0 + 3.0/2.0 + 3.0/(4.0*zeta_val2^2)) + ...
            zeta_val2^3 + 2.0*zeta_val2;
        L_4_plus = M_val^4*(6.0/(tau+1.0)^2 + 48.0/(tau+1.0) + 16.0) + ...
            M_val^3*( 6144.0* zeta_val2/(5.0^24*(tau+1.0)^3) - ...
            6144.0*zeta_val2/(5.0^24*(tau+1.0)^2) - 24.0* zeta_val2/(tau+1.0) - ...
            32.0*zeta_val2 ) + M_val^2*( 2048.0*zeta_val2^2/(5.0^24* (tau+1.0)^3) - ...
            2048.0*zeta_val2^2/(5.0^24*(tau+1.0)^2) + 4.0*zeta_val2^2/ (tau+1.0) + ...
            2048.0/(5.0^24*(tau+1.0)^3) - 2048.0/(5.0^24*(tau+1.0)^2) + ...
            8.0/(tau+1.0) + 24.0*zeta_val2^2 + 36.0 ) - M_val*( 8.0*zeta_val2^3 + ...
            16.0*zeta_val2 ) + Zdf2*( M_val^8/((tau+1.0)^4*zeta_val2^3) - ...
            8.0*M_val^7/((tau+1.0)^3*zeta_val2^2) + M_val^6*( 6144.0/(5.0^24*(tau+ ...
            1.0)^4*zeta_val2) + 4.0/((tau+1.0)^3*zeta_val2) + ...
            24.0/((tau+1.0)^2*zeta_val2) + 2.0/((tau+1.0)^3*zeta_val2^3) ) - ...
            M_val^5 * ( 4096.0/(5.0^24*(tau+1.0)^4) + 8192.0/(5.0^24*(tau+1.0)^3) + ...
            24.0/(tau+1.0)^2 + 32.0/(tau+1.0) - 2048.0/(5.0^24*(tau+1.0)^4*zeta_val2^2) + ...
            2048.0/(5.0^24*(tau+1.0)^3*zeta_val2^2) + 12.0/((tau+1.0)^2*zeta_val2^2) ) + ...
            M_val^4*( 6.0*zeta_val2/((tau+1.0)^2) + 48.0*zeta_val2/(tau+1.0) + ...
            4096.0/(5.0^24*(tau+1.0)^4*zeta_val2) - 6144.0/(5.0^24*(tau+ ...
            1.0)^3*zeta_val2) + 6.0/((tau+1.0)^2*zeta_val2) + ...
            24.0/((tau+1.0)*zeta_val2) + 16.0*zeta_val2 + ...
            2048.0/(5.0^25*(tau+1.0)^4*zeta_val2^3) - ...
            2048.0/(5.0^25*(tau+1.0)^3*zeta_val2^3) + ...
            3.0/((tau+1.0)^2*zeta_val2^3) ) + ...
            M_val^3*(  6144.0*zeta_val2^2/(5.0^24*(tau+1.0)^3)  - ...
            6144.0*zeta_val2^2/(5.0^24*(tau+1.0)^2)  - 24.0*zeta_val2^2/(tau+1.0) + ...
            6144.0/(5.0^24*(tau+1.0)^3) - 6144.0/(5.0^24*(tau+1.0)^2) - 24.0/(tau+1.0) - ...
            32.0*zeta_val2^2 - 4096.0/(5.0^24*(tau+1.0)^3*zeta_val2^2) + ...
            4096.0/(5.0^24*(tau+1.0)^2*zeta_val2^2) - 12.0/((tau+1.0)*zeta_val2^2) - ...
            16.0 ) + M_val^2*( 2048.0*zeta_val2^3/(5.0^24*(tau+1.0)^3) - ...
            2048.0*zeta_val2^3/(5.0^24*(tau+1.0)^2) + ...
            4.0*zeta_val2^3/(tau+1.0) - 2048.0*zeta_val2/(5.0^24*(tau+1.0)^3) + ...
            2048.0*zeta_val2/(5.0^24*(tau+1.0)^2) + 6.0*zeta_val2/(tau+1.0) + ...
            24.0*zeta_val2^3 - 2048.0/(5.0^24*(tau+1.0)^3*zeta_val2) + ...
            2048.0/(5.0^24*(tau+1.0)^2*zeta_val2) + 6.0/((tau+1.0)*zeta_val2) + ...
            24.0*zeta_val2 + 3072.0/(5.0^25*(tau+1.0)^3*zeta_val2^3) - ...
            3072.0/(5.0^25*(tau+1.0)^2*zeta_val2^3) + 3.0/((tau+1.0)*zeta_val2^3) + ...
            12.0/(zeta_val2) ) - M_val*( 8.0*zeta_val2^4 + 12.0*zeta_val2^2 + 12.0 + ...
            6.0/(zeta_val2^2) ) + zeta_val2^5 + 2*zeta_val2^3 + 3.0*zeta_val2 + ...
            3.0/(zeta_val2) + 3.0/(2.0*zeta_val2^3)) + zeta_val2^4 + ...
            5.0*zeta_val2^2/2.0 + 19.0/4.0;
        L_4_minus = M_val^4*(6.0/(tau+1.0)^2 + 48.0/(tau+1.0) + 16.0) - M_val^3* ...
            ( 6144.0*zeta_val2/(5.0^24*(tau+1.0)^3) - 6144.0*zeta_val2/(5.0^24*(tau+1.0)^2) - ...
            24.0*zeta_val2/(tau+1.0) - 32.0*zeta_val2 ) + ...
            M_val^2*( 2048.0*zeta_val2^2/(5.0^24*(tau+1.0)^3) - ...
            2048.0*zeta_val2^2/(5.0^24*(tau+1.0)^2) + 4.0*zeta_val2^2/(tau+1.0) + ...
            2048.0/(5.0^24*(tau+1.0)^3) - 2048.0/(5.0^24*(tau+1.0)^2) + 8.0/(tau+1.0) + ...
            24.0*zeta_val2^2 + 36.0 ) + M_val*( 8.0*zeta_val2^3 + 16.0*zeta_val2 ) + ...
            Zdf2*( M_val^8/((tau+1.0)^4*zeta_val2^3) + ...
            8.0*M_val^7/((tau+1.0)^3*zeta_val2^2) + ...
            M_val^6*( 6144.0/(5.0^24*(tau+1.0)^4*zeta_val2) + ...
            4.0/((tau+1.0)^3*zeta_val2) + 24.0/((tau+1.0)^2*zeta_val2) + ...
            2.0/((tau+1.0)^3*zeta_val2^3) ) + M_val^5 * ...
            ( 4096.0/(5.0^24*(tau+1.0)^4) + 8192.0/(5.0^24*(tau+1.0)^3) + ...
            24.0/(tau+1.0)^2 + 32.0/(tau+1.0) - 2048.0/(5.0^24*(tau+1.0)^4*zeta_val2^2) + ...
            2048.0/(5.0^24*(tau+1.0)^3*zeta_val2^2) + 12.0/((tau+1.0)^2*zeta_val2^2) ) + ...
            M_val^4*( 6.0*zeta_val2/((tau+1.0)^2) + 48.0*zeta_val2/(tau+1.0) + ...
            4096.0/(5.0^24*(tau+1.0)^4*zeta_val2) - ...
            6144.0/(5.0^24*(tau+1.0)^3*zeta_val2) + ...
            6.0/((tau+1.0)^2*zeta_val2) + 24.0/((tau+1.0)*zeta_val2) + 16.0*zeta_val2 + ...
            2048.0/(5.0^25*(tau+1.0)^4*zeta_val2^3) - ...
            2048.0/(5.0^25*(tau+1.0)^3*zeta_val2^3) + ...
            3.0/((tau+1.0)^2*zeta_val2^3) ) - ...
            M_val^3*(  6144.0*zeta_val2^2/(5.0^24*(tau+1.0)^3)  - ...
            6144.0*zeta_val2^2/(5.0^24*(tau+1.0)^2)  - 24.0*zeta_val2^2/(tau+1.0) + ...
            6144.0/(5.0^24*(tau+1.0)^3) - 6144.0/(5.0^24*(tau+1.0)^2) - 24.0/(tau+1.0) - ...
            32.0*zeta_val2^2 - 4096.0/(5.0^24*(tau+1.0)^3*zeta_val2^2) + ...
            4096.0/(5.0^24*(tau+1.0)^2*zeta_val2^2) - ...
            12.0/((tau+1.0)*zeta_val2^2) - 16.0 ) + ...
            M_val^2*( 2048.0*zeta_val2^3/(5.0^24*(tau+1.0)^3) - ...
            2048.0*zeta_val2^3/(5.0^24*(tau+1.0)^2) + ...
            4.0*zeta_val2^3/(tau+1.0) - 2048.0*zeta_val2/(5.0^24*(tau+1.0)^3) + ...
            2048.0*zeta_val2/(5.0^24*(tau+1.0)^2) + ...
            6.0*zeta_val2/(tau+1.0) + 24.0*zeta_val2^3 - ...
            2048.0/(5.0^24*(tau+1.0)^3*zeta_val2) + 2048.0/(5.0^24*(tau+1.0)^2*zeta_val2) + ...
            6.0/((tau+1.0)*zeta_val2) + 24.0*zeta_val2 + ...
            3072.0/(5.0^25*(tau+1.0)^3*zeta_val2^3) - ...
            3072.0/(5.0^25*(tau+1.0)^2*zeta_val2^3) + 3.0/((tau+1.0)*zeta_val2^3) + ...
            12.0/(zeta_val2) ) + M_val*( 8.0*zeta_val2^4 + 12.0*zeta_val2^2 + 12.0 + ...
            6.0/(zeta_val2^2) ) + zeta_val2^5 + 2*zeta_val2^3 + 3.0*zeta_val2 + ...
            3.0/(zeta_val2) + 3.0/(2.0*zeta_val2^3)) + zeta_val2^4 + ...
            5.0*zeta_val2^2/2.0 + 19.0/4.0;

        C_0_plus = zeta_val1*Zdf1+1.0;
        C_0_minus = zeta_val1*Zdf1+1.0;
        C_1_plus = -Zdf1*(M_val^2-2.0*M_val*tau*zeta_val1- ...
            2.0*M_val*zeta_val1+tau*zeta_val1^2+tau+zeta_val1^2+ ...
            1.0)/(1.0+tau)+2.0*M_val-zeta_val1;
        C_1_minus = Zdf1*(M_val^2+2.0*M_val*tau*zeta_val1+ ...
            2.0*M_val*zeta_val1+tau*zeta_val1^2+tau+zeta_val1^2+ ...
            1.0)/(1.0+tau)+2.0*M_val+zeta_val1;
        C_2_plus = M_val^4*Zdf1/(zeta_val1*(tau+1.0)^2)- ...
            2.0*M_val^2*(2.0*M_val*Zdf1*zeta_val1- ...
            Zdf1*zeta_val1^2-Zdf1-zeta_val1)/(zeta_val1*(tau+1.0))+ ...
            4.0*Zdf1*M_val^2*zeta_val1+4.0*M_val^2-4.0*Zdf1*M_val*zeta_val1^2- ...
            4.0*Zdf1*M_val-4.0*M_val*zeta_val1+Zdf1*zeta_val1^3+ ...
            2.0*Zdf1*zeta_val1+3.0*Zdf1/(2.0*zeta_val1)+zeta_val1^2+5.0/2.0;
        C_2_minus = M_val^4*Zdf1/(zeta_val1*(tau+1.0)^2) + ...
            2.0*M_val^2*(2.0*M_val*Zdf1*zeta_val1+ ...
            Zdf1*zeta_val1^2+Zdf1+zeta_val1)/(zeta_val1*(tau+1.0))+ ...
            4.0*M_val^2*Zdf1*zeta_val1+4.0*M_val^2+4.0*M_val*Zdf1*zeta_val1^2+ ...
            4.0*M_val*Zdf1+4.0*M_val*zeta_val1+Zdf1*zeta_val1^3+ ...
            2.0*Zdf1*zeta_val1+3.0*Zdf1/(2.0*zeta_val1)+zeta_val1^2+5.0/2.0;

        A_1_plus = D_1_plus/(tau*D_0_plus+1.0);
        A_1_minus = D_1_minus/(tau*D_0_minus+1.0);
        A_2_plus = (2.0*tau*A_1_plus*(D_1_plus-L_1_plus)- ...
            2.0*D_2_plus+L_2_plus)/(tau*L_0_plus+1.0);
        A_2_minus = (2.0*tau*A_1_minus*(D_1_minus-L_1_minus)- ...
            2.0*D_2_minus+L_2_minus)/(tau*L_0_minus+1.0);
        A_3_plus = 4.0*(-tau*A_1_plus*(C_0_plus-1.0)+ ...
            C_1_plus)/(tau*D_0_plus+1.0);
        A_3_minus = 4.0*(-tau*A_1_minus*(C_0_minus-1.0)+ ...
            C_1_minus)/(tau*D_0_minus+1.0);
        A_4_plus = -(4.0*tau*A_1_plus*D_2_plus- 2.0*tau*A_1_plus*L_2_plus+ ...
            tau*A_1_minus*D_2_plus+ tau*A_1_minus*D_2_minus+ ...
            A_2_plus*D_1_plus*tau- A_2_plus*L_1_plus*tau- ...
            3.0*D_3_plus-D_3_minus+ L_3_plus)/(tau*D_0_plus+1.0);
        A_4_minus = -(tau*(A_1_plus*D_2_plus+ A_1_plus*D_2_minus+ ...
            4.0*A_1_minus*D_2_minus- 2.0*A_1_minus*L_2_minus+ ...
            A_2_minus*D_1_minus- A_2_minus*L_1_minus)- ...
            D_3_plus-3.0*D_3_minus+ L_3_minus)/(tau*D_0_minus+1.0);

        rho = sqrt(T)*rho0;
        a1 = -rho*rho;

        R1 = tau * (3.0*A_1_plus*D_3_plus + ...
            A_1_plus*D_3_minus - A_1_plus* ...
            L_3_plus + A_2_plus*D_2_plus - ...
            A_2_plus*L_2_plus/2.0 + A_4_plus* ...
            D_1_plus + A_1_minus*D_3_plus + ...
            3.0*A_1_minus*D_3_minus - A_1_minus* ...
            L_3_minus + A_2_minus*D_2_minus - ...
            A_2_minus*L_2_minus/2.0 + A_4_minus* ...
            D_1_minus) - 2.0*(D_4_plus + D_4_minus) + ...
            1.0/2.0 * (L_4_plus + L_4_minus);

        R2 = tau*(A_1_plus*C_1_plus+A_1_minus*C_1_minus)- ...
            C_2_plus-C_2_minus+tau*(D_1_plus*A_3_plus+ ...
            D_1_minus*A_3_minus)/4.0;
        
        R3 = -tau*(A_1_plus*D_1_plus+A_1_minus*D_1_minus)+ ...
            D_2_plus+D_2_minus;

        a3 = (8.0*q*q*R3 + 16.0)/(q^4*R1+ ...
            4.0*q*q*R2-6.0);

        yy = [Er(2); -a3/a1 * Er(1)];
    end